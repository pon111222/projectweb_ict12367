from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse
from django.db.models import F
from django.utils.timezone import now
from django.views.decorators.http import require_POST
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required

from .models import Menu, Order, OrderItem, Employee, Category


# üîê ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
from django.db.models import Q

def index(request):
    search_query = request.GET.get('search', '')

    if search_query:
        if search_query.isdigit():
            # ‡∏ñ‡πâ‡∏≤ search ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‚ûî ‡∏´‡∏≤ Order ID ‡∏ï‡∏£‡∏á ‡πÜ
            orders = Order.objects.filter(id=int(search_query)).order_by('-id')
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚ûî ‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            orders = Order.objects.filter(menu_name__icontains=search_query).order_by('-id')
    else:
        # ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‚ûî ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        orders = Order.objects.all().order_by('-id')

    return render(request, "index.html", {"orders": orders, "search": search_query})


def about(request):
    return render(request, "about.html")

def contact(request):
    return HttpResponse("<h1>‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå ... </h1>")

def form(request):
    employees = Employee.objects.all()
    return render(request, "form.html", {"employees": employees})

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
@login_required(login_url="login")
def order_create(request):
    employees = Employee.objects.all()
    if request.method == "POST":
        table_number = request.POST.get("table_number")
        sweetness = request.POST.get("sweetness")
        pearl = request.POST.get("pearl")
        employee_id = request.POST.get("employee_id")

        try:
            employee = Employee.objects.get(id=employee_id)
        except Employee.DoesNotExist:
            return HttpResponse("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", status=404)

        order = Order.objects.create(
            table_number=table_number,
            sweetness=sweetness,
            pearl=pearl,
            employee=employee
        )

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        menu = Menu.objects.first()
        if menu:
            OrderItem.objects.create(
                order=order,
                menu=menu,
                quantity=1,
                comment="‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"
            )

        return redirect("index")

    return render(request, "order_form.html", {"employees": employees})

# ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
@login_required(login_url="login")
def order_edit(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    employees = Employee.objects.all()

    if request.method == "POST":
        order.table_number = request.POST.get("table_number")
        order.sweetness = request.POST.get("sweetness")
        order.pearl = request.POST.get("pearl")
        employee_id = request.POST.get("employee_id")

        try:
            employee = Employee.objects.get(id=employee_id)
            order.employee = employee
        except Employee.DoesNotExist:
            return HttpResponse("‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", status=404)

        order.save()
        return redirect("index")

    return render(request, "order_edit_form.html", {
        "order": order,
        "employees": employees
    })

# ‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
@login_required(login_url="login")
def order_delete(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    order.delete()
    return redirect("index")

# ‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get("username")
        password = request.POST.get("password")
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect("index")
        else:
            return render(request, "login.html", {"error": "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
    return render(request, "login.html")

# ‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå
def logout_view(request):
    logout(request)
    return redirect("login")

# ‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
@login_required(login_url="login")
def sales_summary(request):
    employee = Employee.objects.filter(user=request.user).first()

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Manager, ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏î‡∏π
    if not employee or employee.position != 'manager':
        return redirect('index')  # ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á error ‡∏Å‡πá‡πÑ‡∏î‡πâ

    today = now().date()
    today_sales = OrderItem.objects.filter(order__created_at__date=today)
    total_today = sum(item.get_total_price() for item in today_sales)

    all_orders = Order.objects.all()
    all_total = sum(
        item.get_total_price()
        for order in all_orders
        for item in order.items.all()
    )

    return render(request, "sales_summary.html", {
        "today_sales": today_sales,
        "total_today": total_today,
        "all_total": all_total,
    })



# ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
@require_POST
@login_required(login_url="login")
def mark_item_delivered(request, item_id):
    item = get_object_or_404(OrderItem, id=item_id)
    item.is_delivered = True
    item.save()
    return redirect("index")

# ‚úÖ ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
@login_required(login_url="login")
def receipt_view(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    items = order.items.all()
    total = sum(item.get_total_price() for item in items)

    return render(request, "receipt.html", {
        "order": order,
        "items": items,
        "total": total
    })
@login_required(login_url="login")
def index(request):
    search_query = request.GET.get("search", "")
    
    if search_query:
        orders = Order.objects.filter(
            items__menu__name__icontains=search_query
        ).distinct().order_by('-created_at')[:10]
    else:
        orders = Order.objects.all().order_by('-created_at')[:10]
        
    menus = Menu.objects.all()

    return render(request, "index.html", {
        "menus": menus,
        "orders": orders,
        "search": search_query,
    })

menus = Menu.objects.all()


@login_required(login_url="login")
def order_create(request):
    menus = Menu.objects.all()
    return render(request, "order_create.html", {"menus": menus})

@require_POST
@login_required(login_url="login")
def add_to_cart(request, menu_id):
    cart = request.session.get('cart', {})
    cart[menu_id] = cart.get(menu_id, 0) + 1
    request.session['cart'] = cart
    return redirect('order_create')

@login_required(login_url="login")
def view_cart(request):
    cart = request.session.get('cart', {})
    menus = Menu.objects.filter(id__in=cart.keys())
    cart_items = []
    total = 0

    for menu in menus:
        quantity = cart.get(str(menu.id), 0)
        item_total = menu.price * quantity
        total += item_total
        cart_items.append({
            'menu': menu,
            'quantity': quantity,
            'item_total': item_total,
        })

    return render(request, "cart.html", {
        "cart_items": cart_items,
        "total": total,
    })

@require_POST
@login_required(login_url="login")
def confirm_order(request):
    cart = request.session.get('cart', {})

    if not cart:
        return redirect('view_cart')  # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤

    employee = Employee.objects.filter(user=request.user).first()
    if not employee:
        return HttpResponse("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", status=404)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
    order = Order.objects.create(
        table_number="-",  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏•‡∏¢‡πÉ‡∏™‡πà‡∏Ç‡∏µ‡∏î
        sweetness='100',
        pearl='regular',
        employee=employee
    )

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á OrderItem ‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    for menu_id, quantity in cart.items():
        menu = get_object_or_404(Menu, id=menu_id)
        OrderItem.objects.create(
            order=order,
            menu=menu,
            quantity=quantity,
            comment=""
        )

    # ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    request.session['cart'] = {}

    return redirect('index')

@require_POST
@login_required(login_url="login")
def add_to_cart(request, menu_id):
    cart = request.session.get('cart', {})

    sweetness = request.POST.get('sweetness', '100')
    pearl = request.POST.get('pearl', 'regular')

    cart[menu_id] = {
        'quantity': cart.get(menu_id, {}).get('quantity', 0) + 1,
        'sweetness': sweetness,
        'pearl': pearl,
    }
    request.session['cart'] = cart

    return redirect('order_create')

@login_required(login_url="login")
def view_cart(request):
    cart = request.session.get('cart', {})
    cart_items = []
    total_price = 0

    for menu_id, item in cart.items():
        try:
            menu = Menu.objects.get(id=menu_id)
            total = menu.price * item['quantity']
            total_price += total

            cart_items.append({
                'menu': menu,
                'quantity': item['quantity'],
                'sweetness': item.get('sweetness', '100'),
                'pearl': item.get('pearl', 'regular'),
                'total_price': total,
                'get_sweetness_display': lambda: sweetness_display(item.get('sweetness', '100')),
                'get_pearl_display': lambda: pearl_display(item.get('pearl', 'regular')),
            })
        except Menu.DoesNotExist:
            continue

    return render(request, "cart.html", {
        "cart_items": cart_items,
        "total_price": total_price,
    })

# ===== ‡πÉ‡∏™‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á views.py =====

def sweetness_display(value):
    choices = {
        '0': '‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô',
        '25': '‡∏´‡∏ß‡∏≤‡∏ô 25%',
        '50': '‡∏´‡∏ß‡∏≤‡∏ô 50%',
        '75': '‡∏´‡∏ß‡∏≤‡∏ô 75%',
        '100': '‡∏´‡∏ß‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
    }
    return choices.get(str(value), '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')

def pearl_display(value):
    choices = {
        'none': '‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà‡∏°‡∏∏‡∏Å',
        'regular': '‡πÑ‡∏Ç‡πà‡∏°‡∏∏‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥',
        'boba': '‡∏ö‡∏∏‡∏Å/‡πÑ‡∏Ç‡πà‡∏°‡∏∏‡∏Å‡πÉ‡∏´‡∏ç‡πà',
    }
    return choices.get(str(value), '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')

from django.shortcuts import redirect

from django.views.decorators.http import require_POST
from django.shortcuts import redirect

@require_POST
@login_required(login_url="login")
def remove_from_cart(request, menu_id):
    cart = request.session.get('cart', {})
    menu_id_str = str(menu_id)  # ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ key ‡πÉ‡∏ô session ‡πÄ‡∏õ‡πá‡∏ô string

    if menu_id_str in cart:
        del cart[menu_id_str]  # ‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤

    request.session['cart'] = cart
    return redirect('view_cart')


from django.shortcuts import redirect

@require_POST
def confirm_order(request):
    cart = request.session.get('cart', [])
    employee_id = request.user.employee.id if hasattr(request.user, 'employee') else None

    if not cart or not employee_id:
        return redirect('order_create')  # ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    order = Order.objects.create(
        sweetness=cart[0]['sweetness'],
        pearl=cart[0]['pearl'],
        employee_id=employee_id,
    )

    for item in cart:
        menu = get_object_or_404(Menu, id=item['menu_id'])
        OrderItem.objects.create(
            order=order,
            menu=menu,
            quantity=item['quantity'],
            comment=item.get('comment', '')
        )

@require_POST
@login_required(login_url="login")
def confirm_order(request):
    cart = request.session.get('cart', {})
    if not cart:
        return redirect('view_cart')

    employee = Employee.objects.filter(user=request.user).first()
    if not employee:
        return HttpResponse("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", status=404)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
    order = Order.objects.create(
        table_number="-",
        sweetness=list(cart.values())[0].get('sweetness', '100'),
        pearl=list(cart.values())[0].get('pearl', 'regular'),
        employee=employee
    )

    for menu_id, item in cart.items():
        menu = get_object_or_404(Menu, id=menu_id)
        OrderItem.objects.create(
            order=order,
            menu=menu,
            quantity=item.get('quantity', 1),
            comment=item.get('comment', '')
        )

    request.session['cart'] = {}  # ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    return redirect('index')      # ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å

from django.views.decorators.http import require_POST

@require_POST
@login_required(login_url="login")
def add_to_cart(request, menu_id):
    cart = request.session.get('cart', {})

    sweetness = request.POST.get('sweetness', '100')
    pearl = request.POST.get('pearl', 'regular')
    quantity = int(request.POST.get('quantity', 1))  # ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

    if menu_id not in cart:
        cart[menu_id] = {
            'quantity': 0,
            'sweetness': sweetness,
            'pearl': pearl,
        }

    cart[menu_id]['quantity'] += quantity  # ‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    request.session['cart'] = cart

    return redirect('order_create')


@require_POST
@login_required(login_url="login")
def update_cart(request, menu_id):
    cart = request.session.get('cart', {})

    action = request.POST.get('action')

    if str(menu_id) in cart:
        if action == 'increase':
            cart[str(menu_id)]['quantity'] += 1
        elif action == 'decrease':
            cart[str(menu_id)]['quantity'] -= 1
            if cart[str(menu_id)]['quantity'] <= 0:
                del cart[str(menu_id)]

        request.session['cart'] = cart

    return redirect('view_cart')

from django.db.models import Sum, Count
from django.utils import timezone

@login_required(login_url="login")
def dashboard(request):
    today = timezone.now().date()

    # ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    today_sales = OrderItem.objects.filter(order__created_at__date=today)
    total_today = sum(item.get_total_price() for item in today_sales)

    # ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_sales = OrderItem.objects.all()
    total_all = sum(item.get_total_price() for item in all_sales)

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    from datetime import timedelta
    sales_by_day = []
    for i in range(7):
        day = today - timedelta(days=i)
        daily_total = OrderItem.objects.filter(order__created_at__date=day)
        daily_sum = sum(item.get_total_price() for item in daily_total)
        sales_by_day.append({
            'date': day.strftime('%d/%m'),
            'total': daily_sum
        })
    sales_by_day.reverse()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î > ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î

    # ‡∏´‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    top_menus = (OrderItem.objects
                 .values('menu__name')
                 .annotate(total_quantity=Sum('quantity'))
                 .order_by('-total_quantity')[:5])

    return render(request, "dashboard.html", {
        'total_today': total_today,
        'total_all': total_all,
        'sales_by_day': sales_by_day,
        'top_menus': top_menus,
    })

from django.db.models import Sum
from django.utils import timezone
from datetime import timedelta

@login_required(login_url="login")
def sales_summary(request):
    selected_date = request.GET.get('date')
    if selected_date:
        selected_date = timezone.datetime.strptime(selected_date, '%Y-%m-%d').date()
    else:
        selected_date = timezone.now().date()

    today_sales = OrderItem.objects.filter(order__created_at__date=selected_date)
    total_today = sum(item.get_total_price() for item in today_sales)

    all_orders = OrderItem.objects.all()
    all_total = sum(item.get_total_price() for item in all_orders)

    # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    sales_by_day = []
    for i in range(6, -1, -1):  # 6 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô -> ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        day = timezone.now().date() - timedelta(days=i)
        day_sales = OrderItem.objects.filter(order__created_at__date=day)
        total = sum(item.get_total_price() for item in day_sales)
        sales_by_day.append({'day': day.strftime('%d/%m'), 'total': total})

    # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    from django.db.models.functions import TruncMonth
    monthly_sales = (OrderItem.objects
        .annotate(month=TruncMonth('order__created_at'))
        .values('month')
        .annotate(total=Sum(F('menu__price') * F('quantity')))
        .order_by('month')
    )

    # Top 5 ‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    top_menus = (OrderItem.objects
        .values('menu__name')
        .annotate(total_quantity=Sum('quantity'))
        .order_by('-total_quantity')[:5]
    )

    return render(request, "sales_summary.html", {
        'today_sales': today_sales,
        'total_today': total_today,
        'all_total': all_total,
        'selected_date': selected_date,
        'daily_sales': sales_by_day,
        'monthly_sales': monthly_sales,
        'top_menus': top_menus,
    })

from django.db.models import Sum, F
from django.utils import timezone
from datetime import timedelta
from django.db.models.functions import TruncMonth

@login_required(login_url="login")
def sales_summary(request):
    employee = Employee.objects.filter(user=request.user).first()

    # üîí ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Manager ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if not employee or employee.position != 'manager':
        return redirect('index')

    selected_date = request.GET.get('date')
    if selected_date:
        selected_date = timezone.datetime.strptime(selected_date, '%Y-%m-%d').date()
    else:
        selected_date = timezone.now().date()

    # üîπ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    today_sales = OrderItem.objects.filter(order__created_at__date=selected_date)
    total_today = sum(item.get_total_price() for item in today_sales)

    # üîπ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    all_orders = OrderItem.objects.all()
    all_total = sum(item.get_total_price() for item in all_orders)

    # üîπ ‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    sales_by_day = []
    for i in range(6, -1, -1):  # 6 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô -> ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        day = timezone.now().date() - timedelta(days=i)
        day_sales = OrderItem.objects.filter(order__created_at__date=day)
        total = sum(item.get_total_price() for item in day_sales)
        sales_by_day.append({'day': day.strftime('%d/%m'), 'total': total})

    # üîπ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    monthly_sales = (
        OrderItem.objects
        .annotate(month=TruncMonth('order__created_at'))
        .values('month')
        .annotate(total=Sum(F('menu__price') * F('quantity')))
        .order_by('month')
    )

    # üîπ Top 5 ‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    top_menus = (
        OrderItem.objects
        .values('menu__name')
        .annotate(total_quantity=Sum('quantity'))
        .order_by('-total_quantity')[:5]
    )

    return render(request, "sales_summary.html", {
        'today_sales': today_sales,
        'total_today': total_today,
        'all_total': all_total,
        'selected_date': selected_date,
        'daily_sales': sales_by_day,
        'monthly_sales': monthly_sales,
        'top_menus': top_menus,
    })


@login_required(login_url="login")
def order_create(request):
    category_id = request.GET.get('category')  # ‡∏£‡∏±‡∏ö id ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å URL

    if category_id:
        menus = Menu.objects.filter(category_id=category_id)
    else:
        menus = Menu.objects.all()

    categories = Category.objects.all()  # ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÇ‡∏ä‡∏ß‡πå

    return render(request, "order_create.html", {
        "menus": menus,
        "categories": categories,
        "selected_category": category_id,
    })


from django.contrib.auth.models import User

@login_required(login_url="login")
def staff_manage(request):
    employee = Employee.objects.filter(user=request.user).first()

    # ‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Manager ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ
    if not employee or employee.position != 'manager':
        return redirect('index')

    if request.method == "POST":
        username = request.POST.get('username')
        password = request.POST.get('password')

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏´‡∏°‡πà
        user = User.objects.create_user(username=username, password=password)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Employee ‡πÉ‡∏´‡πâ User ‡∏ô‡∏±‡πâ‡∏ô (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: staff)
        Employee.objects.create(user=user, position='staff')

        return redirect('staff_manage')

    staff_list = Employee.objects.filter(position='staff')
    return render(request, 'staff_manage.html', {
        'staff_list': staff_list,
    })

@require_POST
@login_required(login_url="login")
def delete_staff(request, staff_id):
    employee = Employee.objects.filter(id=staff_id, position='staff').first()

    if employee:
        employee.user.delete()  # ‡∏•‡∏ö User ‡∏î‡πâ‡∏ß‡∏¢
        employee.delete()

    return redirect('staff_manage')


@require_POST
@login_required(login_url="login")
def reset_staff_password(request, staff_id):
    employee = Employee.objects.filter(id=staff_id, position='staff').first()

    if employee:
        new_password = request.POST.get('new_password')
        user = employee.user
        user.set_password(new_password)
        user.save()

    return redirect('staff_manage')

from django.http import JsonResponse
from .models import Order
from django.utils.timezone import now

def check_new_orders(request):
    last_check = request.session.get('last_check', None)
    if last_check:
        new_orders = Order.objects.filter(created_at__gt=last_check).exists()
    else:
        new_orders = False

    request.session['last_check'] = now().isoformat()
    return JsonResponse({'new_order': new_orders})

from django.http import JsonResponse
from .models import Order
from django.utils.timezone import now

def check_new_orders(request):
    last_check = request.session.get('last_check', None)
    if last_check:
        new_orders = Order.objects.filter(created_at__gt=last_check).exists()
    else:
        new_orders = False

    request.session['last_check'] = now().isoformat()
    return JsonResponse({'new_order': new_orders})

from django.http import JsonResponse
from .models import Order

